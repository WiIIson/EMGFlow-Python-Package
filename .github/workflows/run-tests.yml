name: Run Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure write permissions or use BADGE_TOKEN

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test] coverage
          # Install package in editable mode to ensure imports work
      
      - name: Run tests with coverage
        run: |
          export PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE
          coverage run --source=emgflow -m unittest discover -s tests -v
          mv .coverage .coverage.${{ matrix.python-version }}
          coverage xml -o coverage-${{ matrix.python-version }}.xml
          coverage html -d htmlcov-${{ matrix.python-version }}
          coverage report > coverage-${{ matrix.python-version }}.txt
        # Specify source, set PYTHONPATH, and generate reports
      
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}
          path: |
            .coverage.${{ matrix.python-version }}
            coverage-${{ matrix.python-version }}.xml
            coverage-${{ matrix.python-version }}.txt
            htmlcov-${{ matrix.python-version }}/
        # Upload raw .coverage file and reports

  aggregate-coverage:
    runs-on: ubuntu-latest
    needs: test # Run after all test jobs complete
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure write permissions or use BADGE_TOKEN

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      
      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          path: coverage-data
          merge-multiple: true # Merge artifacts from all matrix jobs
      
      - name: Combine coverage data
        run: |
          mv coverage-data/.coverage.* .
          coverage combine
          coverage xml -o coverage-combined.xml
          coverage html -d htmlcov-combined
          coverage report > coverage-combined.txt
        # Move .coverage files to root, combine, and generate reports
      
      - name: Extract combined coverage percentage
        run: |
          COVERAGE=$(grep 'TOTAL' coverage-combined.txt | awk '{print $NF}' | sed 's/%//')
          echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV
        # Extract the combined coverage percentage
      
      - name: Generate shields.io badge SVG
        run: |
          COVERAGE=${{ env.COVERAGE_PERCENT }}
          COLOR="red"
          if [ "$COVERAGE" -ge 90 ]; then COLOR="brightgreen"; fi
          if [ "$COVERAGE" -ge 80 ] && [ "$COVERAGE" -lt 90 ]; then COLOR="green"; fi
          if [ "$COVERAGE" -ge 70 ] && [ "$COVERAGE" -lt 80 ]; then COLOR="yellowgreen"; fi
          if [ "$COVERAGE" -ge 60 ] && [ "$COVERAGE" -lt 70 ]; then COLOR="yellow"; fi
          if [ "$COVERAGE" -ge 50 ] && [ "$COVERAGE" -lt 60 ]; then COLOR="orange"; fi
          mkdir -p badges
          curl "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR.svg" -o badges/coverage.svg
        # Download SVG badge from shields.io
      
      - name: Commit badge SVG
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add badges/coverage.svg
          git commit -m "Update coverage badge SVG [ci skip]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Or BADGE_TOKEN
        # Commit with [ci skip] to prevent infinite loop
      
      - name: Upload combined results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-combined
          path: |
            coverage-combined.xml
            coverage-combined.txt
            htmlcov-combined/
            badges/coverage.svg
        # Include combined coverage reports and badge