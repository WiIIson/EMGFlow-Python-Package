import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.CgPgIgqO.js";const c=JSON.parse('{"title":"FileAccess Module Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"reference/file-access.md","filePath":"reference/file-access.md","lastUpdated":1743467029000}'),t={name:"reference/file-access.md"};function l(p,s,h,r,o,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="fileaccess-module-documentation" tabindex="-1"><code>FileAccess</code> Module Documentation <a class="header-anchor" href="#fileaccess-module-documentation" aria-label="Permalink to &quot;\`FileAccess\` Module Documentation&quot;">​</a></h1><p>These functions provide helper methods for accessing files, and are mostly used internally by the package.</p><hr><h2 id="readfiletype" tabindex="-1"><code>ReadFileType</code> <a class="header-anchor" href="#readfiletype" aria-label="Permalink to &quot;\`ReadFileType\`&quot;">​</a></h2><p><strong>Description</strong></p><p><code>ReadFileType</code> is a safe wrapper for reading files of a given extension.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReadFileType(path, file_ext)</span></span></code></pre></div><p><strong>Parameters</strong></p><p><code>path</code>: str</p><ul><li>String filepath of file to read.</li></ul><p><code>file_ext</code>: str</p><ul><li>String extension of the files to read.</li></ul><p><strong>Returns</strong></p><p><code>ReadFileType</code>: pd.DataFrame</p><ul><li>Returns a Pandas dataframe of the file contents.</li></ul><p><strong>Error</strong></p><p>Raises an error if the file could not be read.</p><p>Raises an error if an unsupported file format was provided for <code>file_ext</code>.</p><p><strong>Example</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data/raw/file01.csv&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;csv&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReadFileType(path, ext)</span></span></code></pre></div><hr><h2 id="mapfiles" tabindex="-1"><code>MapFiles</code> <a class="header-anchor" href="#mapfiles" aria-label="Permalink to &quot;\`MapFiles\`&quot;">​</a></h2><p><strong>Description</strong></p><p><code>MapFiles</code> generates a dictionary of file name and location keys/values from a folder and its subfolders.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MapFiles(in_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file_ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Parameters</strong></p><p><code>in_path</code>: str</p><ul><li>String filepath to a directory containing Signal files.</li></ul><p><code>file_ext</code>: str (&quot;csv&quot;)</p><ul><li>String extension of the files to read. The default is <code>&#39;csv&#39;</code>.</li></ul><p><code>expression</code>: str (None)</p><ul><li>Optional regular expression. If provided, only maps files whose names match the regular expression matches.</li></ul><p><strong>Returns</strong></p><p><code>MapFiles</code>: dict</p><ul><li>Returns a dictionary of file names and locations keys/values.</li></ul><p><strong>Error</strong></p><p>Raises an error if <code>expression</code> is not a valid regular expression.</p><p><strong>Example</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Map all csv files in &#39;dataFiles&#39; folder and subfolders</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_loc1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.MapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Map all csv files in &#39;dataFiles&#39; folder and subfolders</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># that start with &#39;DATA_&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_loc2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.MapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^DATA_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="convertmapfiles" tabindex="-1"><code>ConvertMapFiles</code> <a class="header-anchor" href="#convertmapfiles" aria-label="Permalink to &quot;\`ConvertMapFiles\`&quot;">​</a></h2><p><strong>Description</strong></p><p>A more advanced version of <code>MapFiles</code> that can coerce other data types into the <code>MapFiles</code> format.</p><p>If provided a dictionary (assumed to be a file location map), it will return it, filtered by <code>expression</code> if provided.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConvertMapFiles(fileObj, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file_ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">experssion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Parameters</strong></p><p><code>fileObj</code>: str, dict</p><ul><li>Any filepath data type supported by the function. Supported data types are: string filepath, or filepath dictionary.</li></ul><p><code>file_ext</code>: str (&quot;csv&quot;)</p><ul><li>Extension of the files to read. The default is &#39;csv&#39;.</li></ul><p><code>expression</code>: str (None)</p><ul><li>Optional regular expression. If provided, only maps files whose names match the regular expression matches.</li></ul><p><strong>Returns</strong></p><p><code>ConvertMapFiles</code>: dict</p><ul><li>Returns a dictionary of file names and locations keys/values.</li></ul><p><strong>Error</strong></p><p>Raises an error if provided an unsupported file type for <code>fileObj</code> is provided.</p><p>Raises an error if <code>expression</code> is not a valid regular expression.</p><p><strong>Example</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read in file locations normally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_loc1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.ConvertMapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Filter an existing dataframe with a regular expression</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_loc2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.ConvertMapFiles(file_loc1, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="mapfilesfuse" tabindex="-1"><code>MapFilesFuse</code> <a class="header-anchor" href="#mapfilesfuse" aria-label="Permalink to &quot;\`MapFilesFuse\`&quot;">​</a></h2><p><strong>Description</strong></p><p>Combines multiple dictionaries of mapped files (see <code>MapFiles</code>) into a Pandas DataFrame.</p><p>Assumes that the files contained in the first dictionary are present in each of the following dictionaries.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MapFilesFuse(filedirs, names)</span></span></code></pre></div><p><strong>Parameters</strong></p><p><code>filedirs</code>: dict list</p><ul><li>List of dictionaries assumed to contain file maps.</li></ul><p><code>names</code>: str list</p><ul><li>List of names to use for columns, same order as filedirs</li></ul><p><strong>Returns</strong></p><p><code>MapFilesFuse</code>: pd.DataFrame</p><ul><li>Returns a Pandas DataFrame containing each file, and their location for each directory.</li></ul><p><strong>Error</strong></p><p>Raises an error if files contained in the first element of <code>filedirs</code> is not contained in the other directories</p><p><strong>Example</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create file directory dictionaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir_raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.ConvertMapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data/raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notch_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.ConvertMapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data/notch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">band_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.ConvertMapFiles(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/data/bandpass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create dictionary list and names</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filedirs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [dir_raw, notch_path, band_path]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;notch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bandpass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create data frame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_dirs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.MapFilesFuse(filedirs, names)</span></span></code></pre></div>`,78)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
