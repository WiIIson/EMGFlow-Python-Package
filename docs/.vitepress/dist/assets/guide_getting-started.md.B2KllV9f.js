import{_ as t,c as s,o as i,ag as e}from"./chunks/framework.CgPgIgqO.js";const c=JSON.parse('{"title":"Getting started with EMGFlow","description":"","frontmatter":{},"headers":[],"relativePath":"guide/getting-started.md","filePath":"guide/getting-started.md","lastUpdated":1743467029000}'),n={name:"guide/getting-started.md"};function l(d,a,h,p,r,o){return i(),s("div",null,a[0]||(a[0]=[e(`<h1 id="getting-started-with-emgflow" tabindex="-1">Getting started with EMGFlow <a class="header-anchor" href="#getting-started-with-emgflow" aria-label="Permalink to &quot;Getting started with EMGFlow&quot;">​</a></h1><h2 id="download" tabindex="-1">Download <a class="header-anchor" href="#download" aria-label="Permalink to &quot;Download&quot;">​</a></h2><p>EMGFlow can be installed from PyPI:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EMGFlow</span></span></code></pre></div><h2 id="quick-example" tabindex="-1">Quick example <a class="header-anchor" href="#quick-example" aria-label="Permalink to &quot;Quick example&quot;">​</a></h2><p><em>EMGFlow</em> extracts a comprehensive set of 32 statistical features from sEMG signals, achieved with only a few lines of code:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load in-built data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path_names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.make_sample_data()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Preprocess signals</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EMGFlow.CleanSignals(path_names, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sampling_rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Extract features and save results in &quot;Features.csv&quot; in feature_path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EMGFlow.AnalyzeSignals(path_names, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sampling_rate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="input-data-format" tabindex="-1">Input data format <a class="header-anchor" href="#input-data-format" aria-label="Permalink to &quot;Input data format&quot;">​</a></h2><p><em>EMGFlow</em> accepts data in plaintext .CSV file format. Files should have the following format:</p><ul><li>Row 1 - Column headers</li><li>Col 1 - Labelled Time, and contains the timestamps of sampled data</li><li>Col 2:n - Assumed to be sEMG or related signal data.</li></ul><table tabindex="0"><thead><tr><th>Time</th><th>Data-1</th><th>...</th><th>Data-n</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>...</td><td>-.04</td></tr><tr><td>0.1</td><td>0.32</td><td>...</td><td>.9</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><td>20.0</td><td>-1.2</td><td>...</td><td>1.7</td></tr></tbody></table><p>Note, the Time column can be omitted when the sample rate is known.</p>`,12)]))}const g=t(n,[["render",l]]);export{c as __pageData,g as default};
