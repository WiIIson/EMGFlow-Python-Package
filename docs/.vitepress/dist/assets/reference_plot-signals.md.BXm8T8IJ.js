import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.CgPgIgqO.js";const n="/EMGFlow-Python-Package/assets/GenPlotDashEx.BQkG8IOI.png",g=JSON.parse('{"title":"PlotSignals Module Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"reference/plot-signals.md","filePath":"reference/plot-signals.md","lastUpdated":1743467029000}'),l={name:"reference/plot-signals.md"};function o(p,s,r,h,d,c){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="plotsignals-module-documentation" tabindex="-1"><code>PlotSignals</code> Module Documentation <a class="header-anchor" href="#plotsignals-module-documentation" aria-label="Permalink to &quot;\`PlotSignals\` Module Documentation&quot;">​</a></h1><p>The plotting module <code>PlotSignals</code> provides functions to help visualize individual, or large batches of signal data. This helps visually see what is happening in a signal to identify outliers, and determine the kinds of filters that need to be applied.</p><hr><h2 id="genplotdash" tabindex="-1"><code>GenPlotDash</code> <a class="header-anchor" href="#genplotdash" aria-label="Permalink to &quot;\`GenPlotDash\`&quot;">​</a></h2><p><strong>Description:</strong></p><p>Creates a HTML dashboard from a series of signal file paths to compare filtering progress at different stages. Has a side bar menu to navigate the signal file and stage being displayed.</p><p>The visualization is created in the default browser, and is opened automatically.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GenPlotDash(in_paths, sampling_rate, col, units, names, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file_ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">autorun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Parameters:</strong></p><p><code>in_paths</code>: str list</p><ul><li>List of string filepaths to a directories containing Signal files. Directories should contain the same file names, but don&#39;t have to keep the same hierarchy.</li></ul><p><code>sampling_rate</code>: int/float</p><ul><li>Numerical value of the sampling rate of the <code>Signal</code>. This is the number of entries recorded per second, or the inverse of the difference in time between entries.</li></ul><p><code>col</code>: str</p><ul><li>String column name to display in the visualization.</li></ul><p><code>units</code>: str</p><ul><li>Units to use for the y axis of the plot, same units used for the column values.</li></ul><p><code>names</code>: str list</p><ul><li>List of names to use as the legend for the different paths provided</li></ul><p><code>expression</code>: str (None)</p><ul><li>String regular expression. If provided, will only create visualizations for <code>Signal</code> files whose names match the regular expression, and will ignore everything else.</li></ul><p><code>file_ext</code>: str (&quot;csv&quot;)</p><ul><li>String extension of the files to read. Any file in <code>in_path</code> with this extension will be considered to be a <code>Signal</code> file, and treated as such. The default is <code>&#39;csv&#39;</code>.</li></ul><p><code>autorun</code>: bool (True)</p><ul><li>Boolean controlling the behavior of the function. If True (default), will automatically run the visualization in the default browser. If False, will return a shiny.App instance.</li></ul><p><strong>Returns:</strong></p><p><code>GenPlotDash</code>: None or shiny.app</p><p><strong>Error</strong></p><p>Raises an error if the directories in <code>in_paths</code> don&#39;t contain the same files.</p><p>Raises an error if <code>col</code> is not found in a dataframe.</p><p>Raises an error if a file cannot be read from one of the folders in <code>in_paths</code>.</p><p>Raises an error if an unsupported file format was provided for <code>file_ext</code>.</p><p>Raises an error if <code>expression</code> is not a valid regular expression.</p><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">raw_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/raw&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notch_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/notch&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">band_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/bandpass&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s_paths </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [raw_path, notch_path, band_path]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">col </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;col1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">units </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mV&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;notch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bandpass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EMGFlow.GenPlotDash(s_paths, sr, col, units, names)</span></span></code></pre></div><img src="`+n+`" width="500"><hr><h2 id="plotspectrum" tabindex="-1"><code>PlotSpectrum</code> <a class="header-anchor" href="#plotspectrum" aria-label="Permalink to &quot;\`PlotSpectrum\`&quot;">​</a></h2><p><strong>Description:</strong></p><p>Creates plots of PSDs of each column in the Signal files in a directory</p><p>The plots are saved as PNG files in the output directory</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PlotSpectrum(in_path, out_path, sampling_rate, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file_ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Parameters:</strong></p><p><code>in_path</code>: str</p><ul><li>String of a filepath to read Signal files from.</li></ul><p><code>out_path</code>: str</p><ul><li>String of a filepath to output plots to.</li></ul><p><code>sampling_rate</code>: int/float</p><ul><li>Numerical value of the sampling rate of the <code>Signal</code>. This is the number of entries recorded per second, or the inverse of the difference in time between entries.</li></ul><p><code>cols</code>: str (None)</p><ul><li>List of string column names. If provided, will only create plots for the specified columns. If left <code>None</code>, will create plots for each column except for the <code>&#39;Time&#39;</code> column.</li></ul><p><code>p</code>: float (None)</p><ul><li>Random sampling probability, if set to a float between 0 and 1, will randomly plot signals at probability <code>p</code></li></ul><p><code>expression</code>: str (None)</p><ul><li>String regular expression. If provided, will only create visualizations for <code>Signal</code> files whose names match the regular expression, and will ignore everything else.</li></ul><p><code>file_ext</code>: str (&quot;csv&quot;)</p><ul><li>String extension of the files to read. Any file in <code>in_path</code> with this extension will be considered to be a <code>Signal</code> file, and treated as such. The default is <code>&#39;csv&#39;</code>.</li></ul><p><strong>Returns:</strong></p><p><code>PlotSpectrum</code>: None</p><p><strong>Error</strong></p><p>Raises an error if <code>sampling_rate</code> is less or equal to 0.</p><p>Raises an error if a column in <code>cols</code> is not in a dataframe.</p><p>Raises an error if <code>p</code> is not None and not between 0 and 1.</p><p>Raises an error if a file cannot be read in <code>in_path</code>.</p><p>Raises an error if an unsupported file format was provided for <code>file_ext</code>.</p><p>Raises an error if <code>expression</code> is not a valid regular expression.</p><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">raw_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/raw&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plot_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/plots&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EMGFlow.PlotSpectrum(raw_path, plot_path, sr)</span></span></code></pre></div><hr><h2 id="plotcomparesignals" tabindex="-1"><code>PlotCompareSignals</code> <a class="header-anchor" href="#plotcomparesignals" aria-label="Permalink to &quot;\`PlotCompareSignals\`&quot;">​</a></h2><p><strong>Description:</strong></p><p>Creates plots of PSDs from two different stages in the processing pipeline.</p><p>The plots are saved as PNG files in the output directory</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PlotCompareSignals(in_path1, in_path2, out_path, sampling_rate, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file_ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Parameters:</strong></p><p><code>in_path1</code>: str</p><ul><li>String of a filepath to read Signal files from.</li></ul><p><code>in_path2</code>: str</p><ul><li>String of a filepath to read Signal files from.</li></ul><p><code>out_path</code>: str</p><ul><li>String of a filepath to output plots to.</li></ul><p><code>sampling_rate</code>: int/float</p><ul><li>Numerical value of the sampling rate of the <code>Signal</code>. This is the number of entries recorded per second, or the inverse of the difference in time between entries.</li></ul><p><code>cols</code>: str (None)</p><ul><li>List of string column names. If provided, will only create plots for the specified columns. If left <code>None</code>, will create plots for each column except for the <code>&#39;Time&#39;</code> column.</li></ul><p><code>expression</code>: str (None)</p><ul><li>String regular expression. If provided, will only create visualizations for <code>Signal</code> files whose names match the regular expression, and will ignore everything else.</li></ul><p><code>file_ext</code>: str (&quot;csv&quot;)</p><ul><li>String extension of the files to read. Any file in <code>in_path</code> with this extension will be considered to be a <code>Signal</code> file, and treated as such. The default is <code>&#39;csv&#39;</code>.</li></ul><p><strong>Returns:</strong></p><p><code>PlotCompareSignals</code>: None</p><p><strong>Error</strong></p><p>Raises an error if <code>in_path1</code> and <code>in_path2</code> don&#39;t contain the same files.</p><p>Raises an error if <code>sampling_rate</code> is less or equal to 0.</p><p>Raises an error if a column in <code>cols</code> is not in a dataframe.</p><p>Raises an error if a file cannot be read in <code>in_path1</code> or <code>in_path2</code>.</p><p>Raises an error if an unsupported file format was provided for <code>file_ext</code>.</p><p>Raises an error if <code>expression</code> is not a valid regular expression.</p><p><strong>Example:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">raw_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/raw&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">notch_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/notch&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plot_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/plots&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EMGFlow.PlotSpectrum(raw_path, notch_path, plot_path, sr)</span></span></code></pre></div>`,100)]))}const u=i(l,[["render",o]]);export{g as __pageData,u as default};
